var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:module]","category":"page"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PropertyFunctions]\nOrder = [:module, :type, :constant, :macro, :function]","category":"page"},{"location":"api/#PropertyFunctions.PropertyFunctions","page":"API","title":"PropertyFunctions.PropertyFunctions","text":"PropertyFunctions\n\nProvides functionality for easy access to and efficient broadcasting over properties.\n\n\n\n\n\n","category":"module"},{"location":"api/#PropertyFunctions.PropertyFunction","page":"API","title":"PropertyFunctions.PropertyFunction","text":"struct PropertyFunction <: Function\n\nUse only for dispatch in special cases. User code should not create instances of PropertyFunction directly - use the @fp macro instead.\n\nThe type parameters of PropertyFunction are subject to change and not part of the public API of the PropertyFunctions package.\n\n\n\n\n\n","category":"type"},{"location":"api/#PropertyFunctions.@pf-Tuple{Any}","page":"API","title":"PropertyFunctions.@pf","text":"@pf expression\n\nGenerates a function that accesses the properties of it's argument referenced via $property in expression.\n\n@pf($a + $c^2) is equivalent to x -> x.a + x.c^2.\n\nExamples:\n\nxs = StructArrays.StructArray((\n    a = [0.9, 0.1, 0.9, 0.2, 0.7, 0.0, 0.7, 0.5, 0.2, 0.6],\n    b = [0.1, 0.5, 0.9, 0.9, 0.9, 0.6, 0.1, 0.9, 0.8, 0.2],\n    c = [0.4, 0.1, 0.4, 0.1, 0.9, 0.2, 0.4, 0.8, 0.0, 0.1]\n))\n\n@pf($a + $c^2)(xs[1])\nxs .|> @pf $a + $c^2\n\nFunctions generated by @pf come with broadcasting specializations that try to ensure that only the columns referenced via $colname in expr will be read, reducing memory traffic. So data.b will not be accessed in the example above. If the broadcasted function generates structs (including NamedTuples), broadcasting specialization will try to return a StructArrays.StructArray.\n\n@pf is also very handy in sortby and filterby:\n\nxs |> sortby(@pf $a + $c^2)\nxs |> filterby(@pf $a + $c^2 < 0.5)\n\n\n\n\n\n","category":"macro"},{"location":"api/#PropertyFunctions.filterby","page":"API","title":"PropertyFunctions.filterby","text":"filterby([getindex|view,] f)\n\nGenerates a function that filters a table-like array by f, returning either a copy (default) or a view (ignored if the object does not support views).\n\nExample:\n\nxs = [0.9, 0.1, 0.9, 0.2, 0.7, 0.0, 0.7, 0.5, 0.2, 0.6]\nxs |> filterby(x -> x < 0.5)\n\n\n\n\n\n","category":"function"},{"location":"api/#PropertyFunctions.props2varsyms-Tuple{Any}","page":"API","title":"PropertyFunctions.props2varsyms","text":"props2varsyms(expr)\n\nReplace $-escaped properties in expr by generated variable names and return the original property names, new argument names and the modified expression.\n\nUsage:\n\nprops, vars, new_expr = props2varsyms(expr)\n\n\n\n\n\n","category":"method"},{"location":"api/#PropertyFunctions.sortby","page":"API","title":"PropertyFunctions.sortby","text":"sortby(\n    [getindex|view,]\n    f;\n    rev::Bool = false,\n)\n\nGenerates a function that sorts and array by f, returning either a copy (default) or a view (ignored if the object does not support views).\n\nExample:\n\nxs = [0.9, 0.1, 0.9, 0.2, 0.7, 0.0, 0.7, 0.5, 0.2, 0.6]\nxs |> sortby(x -> (x - 0.5)^2)\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#PropertyFunctions.jl","page":"Home","title":"PropertyFunctions.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides functionality for easy access to and efficient broadcasting over properties.","category":"page"},{"location":"","page":"Home","title":"Home","text":"PropertyFunctions defines the macro @pf that can be used to quicky access properties of objects and broadcast efficiently over collections of objects, e.g. via xs .|> @pf $a + $c^2.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Broadcasting functions generated by @pf is GPU-friendly and will try to return a StructArray if the functional expressioin generates a struct (resp. a NamedTuple).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package also provides convencience functions sortby and filterby that work well with functions generated by @pf (but are compatible with generic functions as well).","category":"page"}]
}
